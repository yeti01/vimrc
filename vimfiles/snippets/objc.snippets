# Objective C Snippets
snippet import <...>
	#import <${1:Cocoa/Cocoa.h}>${2}
snippet import "..."
	#import "${1:`Filename()`.h}"${2}
snippet selector
	@selector(${1:method}:)${3}
snippet "
	@"${1}"${2}
snippet object
	${1:NSObject} *${2:foo} = [${3:$1 alloc}]${4};${5}
snippet log
	NSLog(@"${1:%@}"${2});${3}
snippet interface
	@interface ${1:`Filename('', 'someClass')`} : ${2:NSObject}
	{
	${3}
	}

	@end
snippet implementation
	@implementation ${1:`Filename('', 'someClass')`}
	${2}
	@end
snippet protocol
	@protocol ${1:`Filename('$1Delegate', 'MyProtocol')`} ${2:<NSObject>}
	${3}
	@end
snippet init
	- (id)init
	{
		if (self = [super init])
		{
			${1}
		}
		return self;
	}
snippet dealloc
	- (void) dealloc
	{
		${1:deallocations}
		[super dealloc];
	}
snippet super
	[super ${1:init}]${2}
snippet outlet
	IBOutlet ${1:NSSomeClass} *${2:$1};${3}
snippet cat
	@interface ${1:NSObject} (${2:MyCategory})
	@end

	@implementation $1 ($2)
	${3}
	@end
snippet cath
	@interface ${1:`Filename('$1', 'NSObject')`} (${2:MyCategory})
	${3}
	@end
snippet m
	- (${1:id})${2:method}
	{
		${3}
	}
snippet md
	- (${1:id})${2:method};${3}
snippet ibad
	- (IBAction)${1:method}:(${2:id})sender;${3}
snippet iba
	- (IBAction)${1:method}:(${2:id})sender
	{
		${3}
	}
snippet wake
	- (void)awakeFromNib
	{
		${1}
	}
snippet M
	+ (${1:id})${2:method}
	{
		${3:return nil;}
	}
snippet sm
	- (${1:id})${2:method}
	{
		[super $2];${3}
		return self;
	}
snippet objacc
	- (${1:id})${2:thing}
	{
		return $2;
	}

	- (void)set$2:($1)${3:new$2}
	{
		[$3 retain];
		[$2 release];
		$2 = $3;
	}${4}
snippet for object
	for (${1:Class} *${2:some$1} in ${3:array})
	{
		${4}
	}
snippet for in
	for (${1:object} in ${2:array})
	{
		${3:statements}
	}
snippet for array
	unsigned int ${1:object}Count = [${2:array} count];

	for (unsigned int index = 0; index < $1Count; index++)
	{
		${3:id} $1 = [$2 $1AtIndex:index];
		${4}
	}
snippet	try
	@try
	{
		${1:statements}
	}
	@catch (NSException * e)
	{
		${2:handler}
	}
	@finally
	{
		${3:statements}
	}
snippet property
	@property (${1:retain}) ${2:NSSomeClass} ${3:*$2};${4}
snippet synthesize
	@synthesize ${1:property};${2}
snippet alloc
	[[${1:foo} alloc] init${2}];${3}
snippet retain
	[${1:foo} retain];${2}
snippet release
	[${1:foo} release];
snippet autorelease
	[${1:foo} autorelease];
snippet autoreleasepool
	NSAutoreleasePool *${1:pool} = [[NSAutoreleasePool alloc] init];
	${2:/* code */}
	[$1 drain];
snippet exception
	NSException *${1:badness};
	$1 = [NSException exceptionWithName:@"${2:$1Name}"
	                             reason:@"${3}"
	                           userInfo:nil];
	[$1 raise];
snippet pragma
	#pragma mark ${1:-}
snippet class
	@class ${1:Foo};${2}
snippet color
	[[NSColor ${1:blackColor}] set];
snippet array NSArray
	NSArray *${1:array};${2}
snippet array NSMutableArray
	NSMutableArray *${1:array} = [NSMutable array];${2}
snippet dictionary NSDictionary
	NSDictionary ${1}
snippet dictionary NSMutableDictionary
	NSMutableDictionary *${1:dict} = [NSMutableDictionary dictionary];${2}
snippet string NSString
	NSString ${1}
snippet string NSMutableString
	NSMutableString ${1}
